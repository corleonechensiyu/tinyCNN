// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TINYCNN_TCNN_H_
#define FLATBUFFERS_GENERATED_TINYCNN_TCNN_H_


#include "CaffeOp_generated.h"

namespace TCNN {

struct Op;
struct OpT;

struct Net;
struct NetT;

inline const flatbuffers::TypeTable *OpTypeTable();

inline const flatbuffers::TypeTable *NetTypeTable();

enum OpType {
  OpType_Convolution = 0,
  OpType_InnerProduct = 1,
  OpType_Input = 2,
  OpType_Pooling = 3,
  OpType_ReLU = 4,
  OpType_Softmax = 5,
  OpType_MIN = OpType_Convolution,
  OpType_MAX = OpType_Softmax
};

inline const OpType (&EnumValuesOpType())[6] {
  static const OpType values[] = {
    OpType_Convolution,
    OpType_InnerProduct,
    OpType_Input,
    OpType_Pooling,
    OpType_ReLU,
    OpType_Softmax
  };
  return values;
}

inline const char * const *EnumNamesOpType() {
  static const char * const names[] = {
    "Convolution",
    "InnerProduct",
    "Input",
    "Pooling",
    "ReLU",
    "Softmax",
    nullptr
  };
  return names;
}

inline const char *EnumNameOpType(OpType e) {
  if (e < OpType_Convolution || e > OpType_Softmax) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesOpType()[index];
}

enum OpParameter {
  OpParameter_NONE = 0,
  OpParameter_Convolution2D = 1,
  OpParameter_InnerProduct = 2,
  OpParameter_Pooling = 3,
  OpParameter_Input = 4,
  OpParameter_ReLU = 5,
  OpParameter_Softmax = 6,
  OpParameter_MIN = OpParameter_NONE,
  OpParameter_MAX = OpParameter_Softmax
};

inline const OpParameter (&EnumValuesOpParameter())[7] {
  static const OpParameter values[] = {
    OpParameter_NONE,
    OpParameter_Convolution2D,
    OpParameter_InnerProduct,
    OpParameter_Pooling,
    OpParameter_Input,
    OpParameter_ReLU,
    OpParameter_Softmax
  };
  return values;
}

inline const char * const *EnumNamesOpParameter() {
  static const char * const names[] = {
    "NONE",
    "Convolution2D",
    "InnerProduct",
    "Pooling",
    "Input",
    "ReLU",
    "Softmax",
    nullptr
  };
  return names;
}

inline const char *EnumNameOpParameter(OpParameter e) {
  if (e < OpParameter_NONE || e > OpParameter_Softmax) return "";
  const size_t index = static_cast<int>(e);
  return EnumNamesOpParameter()[index];
}

template<typename T> struct OpParameterTraits {
  static const OpParameter enum_value = OpParameter_NONE;
};

template<> struct OpParameterTraits<Convolution2D> {
  static const OpParameter enum_value = OpParameter_Convolution2D;
};

template<> struct OpParameterTraits<InnerProduct> {
  static const OpParameter enum_value = OpParameter_InnerProduct;
};

template<> struct OpParameterTraits<Pooling> {
  static const OpParameter enum_value = OpParameter_Pooling;
};

template<> struct OpParameterTraits<Input> {
  static const OpParameter enum_value = OpParameter_Input;
};

template<> struct OpParameterTraits<ReLU> {
  static const OpParameter enum_value = OpParameter_ReLU;
};

template<> struct OpParameterTraits<Softmax> {
  static const OpParameter enum_value = OpParameter_Softmax;
};

struct OpParameterUnion {
  OpParameter type;
  void *value;

  OpParameterUnion() : type(OpParameter_NONE), value(nullptr) {}
  OpParameterUnion(OpParameterUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(OpParameter_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  OpParameterUnion(const OpParameterUnion &) FLATBUFFERS_NOEXCEPT;
  OpParameterUnion &operator=(const OpParameterUnion &u) FLATBUFFERS_NOEXCEPT
    { OpParameterUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  OpParameterUnion &operator=(OpParameterUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~OpParameterUnion() { Reset(); }

  void Reset();

#ifndef FLATBUFFERS_CPP98_STL
  template <typename T>
  void Set(T&& val) {
    Reset();
    type = OpParameterTraits<typename T::TableType>::enum_value;
    if (type != OpParameter_NONE) {
      value = new T(std::forward<T>(val));
    }
  }
#endif  // FLATBUFFERS_CPP98_STL

  static void *UnPack(const void *obj, OpParameter type, const flatbuffers::resolver_function_t *resolver);
  flatbuffers::Offset<void> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  Convolution2DT *AsConvolution2D() {
    return type == OpParameter_Convolution2D ?
      reinterpret_cast<Convolution2DT *>(value) : nullptr;
  }
  const Convolution2DT *AsConvolution2D() const {
    return type == OpParameter_Convolution2D ?
      reinterpret_cast<const Convolution2DT *>(value) : nullptr;
  }
  InnerProductT *AsInnerProduct() {
    return type == OpParameter_InnerProduct ?
      reinterpret_cast<InnerProductT *>(value) : nullptr;
  }
  const InnerProductT *AsInnerProduct() const {
    return type == OpParameter_InnerProduct ?
      reinterpret_cast<const InnerProductT *>(value) : nullptr;
  }
  PoolingT *AsPooling() {
    return type == OpParameter_Pooling ?
      reinterpret_cast<PoolingT *>(value) : nullptr;
  }
  const PoolingT *AsPooling() const {
    return type == OpParameter_Pooling ?
      reinterpret_cast<const PoolingT *>(value) : nullptr;
  }
  InputT *AsInput() {
    return type == OpParameter_Input ?
      reinterpret_cast<InputT *>(value) : nullptr;
  }
  const InputT *AsInput() const {
    return type == OpParameter_Input ?
      reinterpret_cast<const InputT *>(value) : nullptr;
  }
  ReLUT *AsReLU() {
    return type == OpParameter_ReLU ?
      reinterpret_cast<ReLUT *>(value) : nullptr;
  }
  const ReLUT *AsReLU() const {
    return type == OpParameter_ReLU ?
      reinterpret_cast<const ReLUT *>(value) : nullptr;
  }
  SoftmaxT *AsSoftmax() {
    return type == OpParameter_Softmax ?
      reinterpret_cast<SoftmaxT *>(value) : nullptr;
  }
  const SoftmaxT *AsSoftmax() const {
    return type == OpParameter_Softmax ?
      reinterpret_cast<const SoftmaxT *>(value) : nullptr;
  }
};

bool VerifyOpParameter(flatbuffers::Verifier &verifier, const void *obj, OpParameter type);
bool VerifyOpParameterVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct OpT : public flatbuffers::NativeTable {
  typedef Op TableType;
  std::vector<int32_t> inputIndexes;
  OpParameterUnion main;
  std::string name;
  std::vector<int32_t> outputIndexes;
  OpType type;
  int32_t bottom_size;
  int32_t top_size;
  std::string bottom_blobs;
  std::string top_blobs;
  OpT()
      : type(OpType_Convolution),
        bottom_size(0),
        top_size(0) {
  }
};

struct Op FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OpT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return OpTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUTINDEXES = 4,
    VT_MAIN_TYPE = 6,
    VT_MAIN = 8,
    VT_NAME = 10,
    VT_OUTPUTINDEXES = 12,
    VT_TYPE = 14,
    VT_BOTTOM_SIZE = 16,
    VT_TOP_SIZE = 18,
    VT_BOTTOM_BLOBS = 20,
    VT_TOP_BLOBS = 22
  };
  const flatbuffers::Vector<int32_t> *inputIndexes() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTINDEXES);
  }
  OpParameter main_type() const {
    return static_cast<OpParameter>(GetField<uint8_t>(VT_MAIN_TYPE, 0));
  }
  const void *main() const {
    return GetPointer<const void *>(VT_MAIN);
  }
  template<typename T> const T *main_as() const;
  const Convolution2D *main_as_Convolution2D() const {
    return main_type() == OpParameter_Convolution2D ? static_cast<const Convolution2D *>(main()) : nullptr;
  }
  const InnerProduct *main_as_InnerProduct() const {
    return main_type() == OpParameter_InnerProduct ? static_cast<const InnerProduct *>(main()) : nullptr;
  }
  const Pooling *main_as_Pooling() const {
    return main_type() == OpParameter_Pooling ? static_cast<const Pooling *>(main()) : nullptr;
  }
  const Input *main_as_Input() const {
    return main_type() == OpParameter_Input ? static_cast<const Input *>(main()) : nullptr;
  }
  const ReLU *main_as_ReLU() const {
    return main_type() == OpParameter_ReLU ? static_cast<const ReLU *>(main()) : nullptr;
  }
  const Softmax *main_as_Softmax() const {
    return main_type() == OpParameter_Softmax ? static_cast<const Softmax *>(main()) : nullptr;
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<int32_t> *outputIndexes() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTINDEXES);
  }
  OpType type() const {
    return static_cast<OpType>(GetField<int32_t>(VT_TYPE, 0));
  }
  int32_t bottom_size() const {
    return GetField<int32_t>(VT_BOTTOM_SIZE, 0);
  }
  int32_t top_size() const {
    return GetField<int32_t>(VT_TOP_SIZE, 0);
  }
  const flatbuffers::String *bottom_blobs() const {
    return GetPointer<const flatbuffers::String *>(VT_BOTTOM_BLOBS);
  }
  const flatbuffers::String *top_blobs() const {
    return GetPointer<const flatbuffers::String *>(VT_TOP_BLOBS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INPUTINDEXES) &&
           verifier.VerifyVector(inputIndexes()) &&
           VerifyField<uint8_t>(verifier, VT_MAIN_TYPE) &&
           VerifyOffset(verifier, VT_MAIN) &&
           VerifyOpParameter(verifier, main(), main_type()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_OUTPUTINDEXES) &&
           verifier.VerifyVector(outputIndexes()) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_BOTTOM_SIZE) &&
           VerifyField<int32_t>(verifier, VT_TOP_SIZE) &&
           VerifyOffset(verifier, VT_BOTTOM_BLOBS) &&
           verifier.VerifyString(bottom_blobs()) &&
           VerifyOffset(verifier, VT_TOP_BLOBS) &&
           verifier.VerifyString(top_blobs()) &&
           verifier.EndTable();
  }
  OpT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(OpT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Op> Pack(flatbuffers::FlatBufferBuilder &_fbb, const OpT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const Convolution2D *Op::main_as<Convolution2D>() const {
  return main_as_Convolution2D();
}

template<> inline const InnerProduct *Op::main_as<InnerProduct>() const {
  return main_as_InnerProduct();
}

template<> inline const Pooling *Op::main_as<Pooling>() const {
  return main_as_Pooling();
}

template<> inline const Input *Op::main_as<Input>() const {
  return main_as_Input();
}

template<> inline const ReLU *Op::main_as<ReLU>() const {
  return main_as_ReLU();
}

template<> inline const Softmax *Op::main_as<Softmax>() const {
  return main_as_Softmax();
}

struct OpBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_inputIndexes(flatbuffers::Offset<flatbuffers::Vector<int32_t>> inputIndexes) {
    fbb_.AddOffset(Op::VT_INPUTINDEXES, inputIndexes);
  }
  void add_main_type(OpParameter main_type) {
    fbb_.AddElement<uint8_t>(Op::VT_MAIN_TYPE, static_cast<uint8_t>(main_type), 0);
  }
  void add_main(flatbuffers::Offset<void> main) {
    fbb_.AddOffset(Op::VT_MAIN, main);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Op::VT_NAME, name);
  }
  void add_outputIndexes(flatbuffers::Offset<flatbuffers::Vector<int32_t>> outputIndexes) {
    fbb_.AddOffset(Op::VT_OUTPUTINDEXES, outputIndexes);
  }
  void add_type(OpType type) {
    fbb_.AddElement<int32_t>(Op::VT_TYPE, static_cast<int32_t>(type), 0);
  }
  void add_bottom_size(int32_t bottom_size) {
    fbb_.AddElement<int32_t>(Op::VT_BOTTOM_SIZE, bottom_size, 0);
  }
  void add_top_size(int32_t top_size) {
    fbb_.AddElement<int32_t>(Op::VT_TOP_SIZE, top_size, 0);
  }
  void add_bottom_blobs(flatbuffers::Offset<flatbuffers::String> bottom_blobs) {
    fbb_.AddOffset(Op::VT_BOTTOM_BLOBS, bottom_blobs);
  }
  void add_top_blobs(flatbuffers::Offset<flatbuffers::String> top_blobs) {
    fbb_.AddOffset(Op::VT_TOP_BLOBS, top_blobs);
  }
  explicit OpBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  OpBuilder &operator=(const OpBuilder &);
  flatbuffers::Offset<Op> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Op>(end);
    return o;
  }
};

inline flatbuffers::Offset<Op> CreateOp(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> inputIndexes = 0,
    OpParameter main_type = OpParameter_NONE,
    flatbuffers::Offset<void> main = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> outputIndexes = 0,
    OpType type = OpType_Convolution,
    int32_t bottom_size = 0,
    int32_t top_size = 0,
    flatbuffers::Offset<flatbuffers::String> bottom_blobs = 0,
    flatbuffers::Offset<flatbuffers::String> top_blobs = 0) {
  OpBuilder builder_(_fbb);
  builder_.add_top_blobs(top_blobs);
  builder_.add_bottom_blobs(bottom_blobs);
  builder_.add_top_size(top_size);
  builder_.add_bottom_size(bottom_size);
  builder_.add_type(type);
  builder_.add_outputIndexes(outputIndexes);
  builder_.add_name(name);
  builder_.add_main(main);
  builder_.add_inputIndexes(inputIndexes);
  builder_.add_main_type(main_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Op> CreateOpDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *inputIndexes = nullptr,
    OpParameter main_type = OpParameter_NONE,
    flatbuffers::Offset<void> main = 0,
    const char *name = nullptr,
    const std::vector<int32_t> *outputIndexes = nullptr,
    OpType type = OpType_Convolution,
    int32_t bottom_size = 0,
    int32_t top_size = 0,
    const char *bottom_blobs = nullptr,
    const char *top_blobs = nullptr) {
  auto inputIndexes__ = inputIndexes ? _fbb.CreateVector<int32_t>(*inputIndexes) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto outputIndexes__ = outputIndexes ? _fbb.CreateVector<int32_t>(*outputIndexes) : 0;
  auto bottom_blobs__ = bottom_blobs ? _fbb.CreateString(bottom_blobs) : 0;
  auto top_blobs__ = top_blobs ? _fbb.CreateString(top_blobs) : 0;
  return TCNN::CreateOp(
      _fbb,
      inputIndexes__,
      main_type,
      main,
      name__,
      outputIndexes__,
      type,
      bottom_size,
      top_size,
      bottom_blobs__,
      top_blobs__);
}

flatbuffers::Offset<Op> CreateOp(flatbuffers::FlatBufferBuilder &_fbb, const OpT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct NetT : public flatbuffers::NativeTable {
  typedef Net TableType;
  std::string bizCode;
  std::vector<std::unique_ptr<OpT>> oplists;
  std::vector<std::string> outputName;
  std::vector<std::string> tensorName;
  int32_t tensorNumber;
  int32_t layer_count;
  int32_t blob_count;
  NetT()
      : tensorNumber(0),
        layer_count(0),
        blob_count(0) {
  }
};

struct Net FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NetT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return NetTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BIZCODE = 4,
    VT_OPLISTS = 6,
    VT_OUTPUTNAME = 8,
    VT_TENSORNAME = 10,
    VT_TENSORNUMBER = 12,
    VT_LAYER_COUNT = 14,
    VT_BLOB_COUNT = 16
  };
  const flatbuffers::String *bizCode() const {
    return GetPointer<const flatbuffers::String *>(VT_BIZCODE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Op>> *oplists() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Op>> *>(VT_OPLISTS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *outputName() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_OUTPUTNAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *tensorName() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_TENSORNAME);
  }
  int32_t tensorNumber() const {
    return GetField<int32_t>(VT_TENSORNUMBER, 0);
  }
  int32_t layer_count() const {
    return GetField<int32_t>(VT_LAYER_COUNT, 0);
  }
  int32_t blob_count() const {
    return GetField<int32_t>(VT_BLOB_COUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BIZCODE) &&
           verifier.VerifyString(bizCode()) &&
           VerifyOffset(verifier, VT_OPLISTS) &&
           verifier.VerifyVector(oplists()) &&
           verifier.VerifyVectorOfTables(oplists()) &&
           VerifyOffset(verifier, VT_OUTPUTNAME) &&
           verifier.VerifyVector(outputName()) &&
           verifier.VerifyVectorOfStrings(outputName()) &&
           VerifyOffset(verifier, VT_TENSORNAME) &&
           verifier.VerifyVector(tensorName()) &&
           verifier.VerifyVectorOfStrings(tensorName()) &&
           VerifyField<int32_t>(verifier, VT_TENSORNUMBER) &&
           VerifyField<int32_t>(verifier, VT_LAYER_COUNT) &&
           VerifyField<int32_t>(verifier, VT_BLOB_COUNT) &&
           verifier.EndTable();
  }
  NetT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(NetT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Net> Pack(flatbuffers::FlatBufferBuilder &_fbb, const NetT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct NetBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bizCode(flatbuffers::Offset<flatbuffers::String> bizCode) {
    fbb_.AddOffset(Net::VT_BIZCODE, bizCode);
  }
  void add_oplists(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Op>>> oplists) {
    fbb_.AddOffset(Net::VT_OPLISTS, oplists);
  }
  void add_outputName(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> outputName) {
    fbb_.AddOffset(Net::VT_OUTPUTNAME, outputName);
  }
  void add_tensorName(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> tensorName) {
    fbb_.AddOffset(Net::VT_TENSORNAME, tensorName);
  }
  void add_tensorNumber(int32_t tensorNumber) {
    fbb_.AddElement<int32_t>(Net::VT_TENSORNUMBER, tensorNumber, 0);
  }
  void add_layer_count(int32_t layer_count) {
    fbb_.AddElement<int32_t>(Net::VT_LAYER_COUNT, layer_count, 0);
  }
  void add_blob_count(int32_t blob_count) {
    fbb_.AddElement<int32_t>(Net::VT_BLOB_COUNT, blob_count, 0);
  }
  explicit NetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NetBuilder &operator=(const NetBuilder &);
  flatbuffers::Offset<Net> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Net>(end);
    return o;
  }
};

inline flatbuffers::Offset<Net> CreateNet(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> bizCode = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Op>>> oplists = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> outputName = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> tensorName = 0,
    int32_t tensorNumber = 0,
    int32_t layer_count = 0,
    int32_t blob_count = 0) {
  NetBuilder builder_(_fbb);
  builder_.add_blob_count(blob_count);
  builder_.add_layer_count(layer_count);
  builder_.add_tensorNumber(tensorNumber);
  builder_.add_tensorName(tensorName);
  builder_.add_outputName(outputName);
  builder_.add_oplists(oplists);
  builder_.add_bizCode(bizCode);
  return builder_.Finish();
}

inline flatbuffers::Offset<Net> CreateNetDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *bizCode = nullptr,
    const std::vector<flatbuffers::Offset<Op>> *oplists = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *outputName = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *tensorName = nullptr,
    int32_t tensorNumber = 0,
    int32_t layer_count = 0,
    int32_t blob_count = 0) {
  auto bizCode__ = bizCode ? _fbb.CreateString(bizCode) : 0;
  auto oplists__ = oplists ? _fbb.CreateVector<flatbuffers::Offset<Op>>(*oplists) : 0;
  auto outputName__ = outputName ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*outputName) : 0;
  auto tensorName__ = tensorName ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*tensorName) : 0;
  return TCNN::CreateNet(
      _fbb,
      bizCode__,
      oplists__,
      outputName__,
      tensorName__,
      tensorNumber,
      layer_count,
      blob_count);
}

flatbuffers::Offset<Net> CreateNet(flatbuffers::FlatBufferBuilder &_fbb, const NetT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline OpT *Op::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new OpT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Op::UnPackTo(OpT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = inputIndexes(); if (_e) { _o->inputIndexes.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->inputIndexes[_i] = _e->Get(_i); } } };
  { auto _e = main_type(); _o->main.type = _e; };
  { auto _e = main(); if (_e) _o->main.value = OpParameterUnion::UnPack(_e, main_type(), _resolver); };
  { auto _e = name(); if (_e) _o->name = _e->str(); };
  { auto _e = outputIndexes(); if (_e) { _o->outputIndexes.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->outputIndexes[_i] = _e->Get(_i); } } };
  { auto _e = type(); _o->type = _e; };
  { auto _e = bottom_size(); _o->bottom_size = _e; };
  { auto _e = top_size(); _o->top_size = _e; };
  { auto _e = bottom_blobs(); if (_e) _o->bottom_blobs = _e->str(); };
  { auto _e = top_blobs(); if (_e) _o->top_blobs = _e->str(); };
}

inline flatbuffers::Offset<Op> Op::Pack(flatbuffers::FlatBufferBuilder &_fbb, const OpT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateOp(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Op> CreateOp(flatbuffers::FlatBufferBuilder &_fbb, const OpT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const OpT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _inputIndexes = _o->inputIndexes.size() ? _fbb.CreateVector(_o->inputIndexes) : 0;
  auto _main_type = _o->main.type;
  auto _main = _o->main.Pack(_fbb);
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _outputIndexes = _o->outputIndexes.size() ? _fbb.CreateVector(_o->outputIndexes) : 0;
  auto _type = _o->type;
  auto _bottom_size = _o->bottom_size;
  auto _top_size = _o->top_size;
  auto _bottom_blobs = _o->bottom_blobs.empty() ? 0 : _fbb.CreateString(_o->bottom_blobs);
  auto _top_blobs = _o->top_blobs.empty() ? 0 : _fbb.CreateString(_o->top_blobs);
  return TCNN::CreateOp(
      _fbb,
      _inputIndexes,
      _main_type,
      _main,
      _name,
      _outputIndexes,
      _type,
      _bottom_size,
      _top_size,
      _bottom_blobs,
      _top_blobs);
}

inline NetT *Net::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new NetT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Net::UnPackTo(NetT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = bizCode(); if (_e) _o->bizCode = _e->str(); };
  { auto _e = oplists(); if (_e) { _o->oplists.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->oplists[_i] = std::unique_ptr<OpT>(_e->Get(_i)->UnPack(_resolver)); } } };
  { auto _e = outputName(); if (_e) { _o->outputName.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->outputName[_i] = _e->Get(_i)->str(); } } };
  { auto _e = tensorName(); if (_e) { _o->tensorName.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->tensorName[_i] = _e->Get(_i)->str(); } } };
  { auto _e = tensorNumber(); _o->tensorNumber = _e; };
  { auto _e = layer_count(); _o->layer_count = _e; };
  { auto _e = blob_count(); _o->blob_count = _e; };
}

inline flatbuffers::Offset<Net> Net::Pack(flatbuffers::FlatBufferBuilder &_fbb, const NetT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateNet(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Net> CreateNet(flatbuffers::FlatBufferBuilder &_fbb, const NetT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const NetT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _bizCode = _o->bizCode.empty() ? 0 : _fbb.CreateString(_o->bizCode);
  auto _oplists = _o->oplists.size() ? _fbb.CreateVector<flatbuffers::Offset<Op>> (_o->oplists.size(), [](size_t i, _VectorArgs *__va) { return CreateOp(*__va->__fbb, __va->__o->oplists[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _outputName = _o->outputName.size() ? _fbb.CreateVectorOfStrings(_o->outputName) : 0;
  auto _tensorName = _o->tensorName.size() ? _fbb.CreateVectorOfStrings(_o->tensorName) : 0;
  auto _tensorNumber = _o->tensorNumber;
  auto _layer_count = _o->layer_count;
  auto _blob_count = _o->blob_count;
  return TCNN::CreateNet(
      _fbb,
      _bizCode,
      _oplists,
      _outputName,
      _tensorName,
      _tensorNumber,
      _layer_count,
      _blob_count);
}

inline bool VerifyOpParameter(flatbuffers::Verifier &verifier, const void *obj, OpParameter type) {
  switch (type) {
    case OpParameter_NONE: {
      return true;
    }
    case OpParameter_Convolution2D: {
      auto ptr = reinterpret_cast<const Convolution2D *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OpParameter_InnerProduct: {
      auto ptr = reinterpret_cast<const InnerProduct *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OpParameter_Pooling: {
      auto ptr = reinterpret_cast<const Pooling *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OpParameter_Input: {
      auto ptr = reinterpret_cast<const Input *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OpParameter_ReLU: {
      auto ptr = reinterpret_cast<const ReLU *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OpParameter_Softmax: {
      auto ptr = reinterpret_cast<const Softmax *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyOpParameterVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyOpParameter(
        verifier,  values->Get(i), types->GetEnum<OpParameter>(i))) {
      return false;
    }
  }
  return true;
}

inline void *OpParameterUnion::UnPack(const void *obj, OpParameter type, const flatbuffers::resolver_function_t *resolver) {
  switch (type) {
    case OpParameter_Convolution2D: {
      auto ptr = reinterpret_cast<const Convolution2D *>(obj);
      return ptr->UnPack(resolver);
    }
    case OpParameter_InnerProduct: {
      auto ptr = reinterpret_cast<const InnerProduct *>(obj);
      return ptr->UnPack(resolver);
    }
    case OpParameter_Pooling: {
      auto ptr = reinterpret_cast<const Pooling *>(obj);
      return ptr->UnPack(resolver);
    }
    case OpParameter_Input: {
      auto ptr = reinterpret_cast<const Input *>(obj);
      return ptr->UnPack(resolver);
    }
    case OpParameter_ReLU: {
      auto ptr = reinterpret_cast<const ReLU *>(obj);
      return ptr->UnPack(resolver);
    }
    case OpParameter_Softmax: {
      auto ptr = reinterpret_cast<const Softmax *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline flatbuffers::Offset<void> OpParameterUnion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher) const {
  switch (type) {
    case OpParameter_Convolution2D: {
      auto ptr = reinterpret_cast<const Convolution2DT *>(value);
      return CreateConvolution2D(_fbb, ptr, _rehasher).Union();
    }
    case OpParameter_InnerProduct: {
      auto ptr = reinterpret_cast<const InnerProductT *>(value);
      return CreateInnerProduct(_fbb, ptr, _rehasher).Union();
    }
    case OpParameter_Pooling: {
      auto ptr = reinterpret_cast<const PoolingT *>(value);
      return CreatePooling(_fbb, ptr, _rehasher).Union();
    }
    case OpParameter_Input: {
      auto ptr = reinterpret_cast<const InputT *>(value);
      return CreateInput(_fbb, ptr, _rehasher).Union();
    }
    case OpParameter_ReLU: {
      auto ptr = reinterpret_cast<const ReLUT *>(value);
      return CreateReLU(_fbb, ptr, _rehasher).Union();
    }
    case OpParameter_Softmax: {
      auto ptr = reinterpret_cast<const SoftmaxT *>(value);
      return CreateSoftmax(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline OpParameterUnion::OpParameterUnion(const OpParameterUnion &u) FLATBUFFERS_NOEXCEPT : type(u.type), value(nullptr) {
  switch (type) {
    case OpParameter_Convolution2D: {
      FLATBUFFERS_ASSERT(false);  // Convolution2DT not copyable.
      break;
    }
    case OpParameter_InnerProduct: {
      value = new InnerProductT(*reinterpret_cast<InnerProductT *>(u.value));
      break;
    }
    case OpParameter_Pooling: {
      value = new PoolingT(*reinterpret_cast<PoolingT *>(u.value));
      break;
    }
    case OpParameter_Input: {
      value = new InputT(*reinterpret_cast<InputT *>(u.value));
      break;
    }
    case OpParameter_ReLU: {
      value = new ReLUT(*reinterpret_cast<ReLUT *>(u.value));
      break;
    }
    case OpParameter_Softmax: {
      value = new SoftmaxT(*reinterpret_cast<SoftmaxT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void OpParameterUnion::Reset() {
  switch (type) {
    case OpParameter_Convolution2D: {
      auto ptr = reinterpret_cast<Convolution2DT *>(value);
      delete ptr;
      break;
    }
    case OpParameter_InnerProduct: {
      auto ptr = reinterpret_cast<InnerProductT *>(value);
      delete ptr;
      break;
    }
    case OpParameter_Pooling: {
      auto ptr = reinterpret_cast<PoolingT *>(value);
      delete ptr;
      break;
    }
    case OpParameter_Input: {
      auto ptr = reinterpret_cast<InputT *>(value);
      delete ptr;
      break;
    }
    case OpParameter_ReLU: {
      auto ptr = reinterpret_cast<ReLUT *>(value);
      delete ptr;
      break;
    }
    case OpParameter_Softmax: {
      auto ptr = reinterpret_cast<SoftmaxT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = OpParameter_NONE;
}

inline const flatbuffers::TypeTable *OpTypeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_INT, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    OpTypeTypeTable
  };
  static const char * const names[] = {
    "Convolution",
    "InnerProduct",
    "Input",
    "Pooling",
    "ReLU",
    "Softmax"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 6, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *OpParameterTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 0, 3 },
    { flatbuffers::ET_SEQUENCE, 0, 4 },
    { flatbuffers::ET_SEQUENCE, 0, 5 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Convolution2DTypeTable,
    InnerProductTypeTable,
    PoolingTypeTable,
    InputTypeTable,
    ReLUTypeTable,
    SoftmaxTypeTable
  };
  static const char * const names[] = {
    "NONE",
    "Convolution2D",
    "InnerProduct",
    "Pooling",
    "Input",
    "ReLU",
    "Softmax"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_UNION, 7, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *OpTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_UTYPE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_INT, 0, 1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    OpParameterTypeTable,
    OpTypeTypeTable
  };
  static const char * const names[] = {
    "inputIndexes",
    "main_type",
    "main",
    "name",
    "outputIndexes",
    "type",
    "bottom_size",
    "top_size",
    "bottom_blobs",
    "top_blobs"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 10, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *NetTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 0 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    OpTypeTable
  };
  static const char * const names[] = {
    "bizCode",
    "oplists",
    "outputName",
    "tensorName",
    "tensorNumber",
    "layer_count",
    "blob_count"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 7, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const TCNN::Net *GetNet(const void *buf) {
  return flatbuffers::GetRoot<TCNN::Net>(buf);
}

inline const TCNN::Net *GetSizePrefixedNet(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<TCNN::Net>(buf);
}

inline bool VerifyNetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TCNN::Net>(nullptr);
}

inline bool VerifySizePrefixedNetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TCNN::Net>(nullptr);
}

inline void FinishNetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TCNN::Net> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedNetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TCNN::Net> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<NetT> UnPackNet(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<NetT>(GetNet(buf)->UnPack(res));
}

}  // namespace TCNN

#endif  // FLATBUFFERS_GENERATED_TINYCNN_TCNN_H_
